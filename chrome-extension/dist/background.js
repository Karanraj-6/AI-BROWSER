var G=Object.defineProperty;var P=(r,e,n)=>e in r?G(r,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):r[e]=n;var T=(r,e,n)=>P(r,typeof e!="symbol"?e+"":e,n);class R{async waitForTabLoad(e,n=2e4){if(typeof e!="number")return;const s=async()=>{await new Promise(o=>setTimeout(o,150))};try{const o=await chrome.tabs.get(e);if((o==null?void 0:o.status)==="complete"){await s();return}}catch{return}await new Promise((o,a)=>{const i=setTimeout(()=>{chrome.tabs.onUpdated.removeListener(t),a(new Error("navigation-timeout"))},n),t=(c,d)=>{c===e&&d.status==="complete"&&(clearTimeout(i),chrome.tabs.onUpdated.removeListener(t),s().then(o).catch(o))};chrome.tabs.onUpdated.addListener(t)})}sendContentAction(e,n){return new Promise((s,o)=>{if(typeof e!="number"){o(new Error("tab-id-required"));return}chrome.tabs.sendMessage(e,{type:"CONTENT_ACTION",payload:n},a=>{var t;const i=(t=chrome.runtime)==null?void 0:t.lastError;if(i){o(new Error(i.message));return}s(a)})})}async handleAction(e){try{switch(e.type){case"NAVIGATE":{const n=typeof e.tabId=="number"?await chrome.tabs.update(e.tabId,{url:e.url}):await chrome.tabs.update({url:e.url}),s=typeof e.tabId=="number"?e.tabId:n==null?void 0:n.id;try{await this.waitForTabLoad(s)}catch(o){console.warn("Timed out waiting for navigation",o)}return{success:!0}}case"CLICK":return await this.waitForTabLoad(e.tabId),await this.sendContentAction(e.tabId,{type:"CLICK",selector:e.selector});case"FILL":return await this.waitForTabLoad(e.tabId),await this.sendContentAction(e.tabId,{type:"FILL",selector:e.selector,value:e.value});case"EVALUATE_SCRIPT":return await this.waitForTabLoad(e.tabId),await this.sendContentAction(e.tabId,{type:"EVALUATE_SCRIPT",code:e.code});case"TAKE_SCREENSHOT":return{success:!0,dataUrl:await chrome.tabs.captureVisibleTab(e.windowId??void 0,{format:"png"})};default:return{success:!1,error:`unknown-action:${e.type}`}}}catch(n){return{success:!1,error:(n==null?void 0:n.message)||String(n)}}}}const $=2e3,K=3e4;class q{constructor(e){T(this,"url");T(this,"status","disconnected");T(this,"socket",null);T(this,"reconnectTimer");T(this,"nextId",1);T(this,"pending",new Map);T(this,"statusListeners",new Set);T(this,"notificationListeners",new Set);this.url=e,this.connect()}connect(){if(!(this.socket||this.status==="connecting")){this.clearReconnectTimer(),this.updateStatus("connecting");try{this.socket=new WebSocket(this.url)}catch(e){this.handleDisconnect(e);return}this.socket.addEventListener("open",()=>{this.updateStatus("connected")}),this.socket.addEventListener("message",e=>{this.handleMessage(e.data)}),this.socket.addEventListener("error",()=>{}),this.socket.addEventListener("close",()=>{this.handleDisconnect()})}}handleDisconnect(e){this.socket=null,this.updateStatus("disconnected");for(const[n,s]of this.pending.entries())s.reject(e??new Error("MCP bridge disconnected before response arrived.")),s.timeoutId!==void 0&&clearTimeout(s.timeoutId),this.pending.delete(n);this.scheduleReconnect()}scheduleReconnect(){this.reconnectTimer===void 0&&(this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=void 0,this.connect()},$))}clearReconnectTimer(){this.reconnectTimer!==void 0&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=void 0)}handleMessage(e){let n;try{n=JSON.parse(e)}catch{console.warn("Ignoring non-JSON message from MCP bridge",e);return}if(typeof(n==null?void 0:n.id)=="string"||typeof(n==null?void 0:n.id)=="number"){const s=String(n.id),o=this.pending.get(s);if(!o)return;if(this.pending.delete(s),o.timeoutId!==void 0&&clearTimeout(o.timeoutId),"error"in n&&n.error){const a=n.error.message??"Unknown MCP error";o.reject(new Error(a))}else"result"in n?o.resolve(n.result):o.resolve(void 0);return}for(const s of this.notificationListeners)try{s(n)}catch(o){console.error("MCP notification listener failed",o)}}updateStatus(e){if(this.status!==e){this.status=e;for(const n of this.statusListeners)try{n(e)}catch(s){console.error("MCP status listener failed",s)}}}onStatusChange(e){return this.statusListeners.add(e),e(this.status),()=>{this.statusListeners.delete(e)}}onNotification(e){return this.notificationListeners.add(e),()=>{this.notificationListeners.delete(e)}}getStatus(){return this.status}isConnected(){return this.status==="connected"}reconnectNow(){this.socket?this.socket.close():this.connect()}async callTool(e,n={}){if(!this.isConnected())throw new Error("mcp-disconnected");return this.sendRequest("tools/call",{name:e,arguments:n})}sendRequest(e,n){if(!this.socket||this.socket.readyState!==WebSocket.OPEN)throw new Error("mcp-disconnected");const s=String(this.nextId++),o={jsonrpc:"2.0",id:s,method:e,params:n};return new Promise((a,i)=>{var c;const t=setTimeout(()=>{this.pending.delete(s),i(new Error("mcp-timeout"))},K);this.pending.set(s,{resolve:a,reject:i,timeoutId:t});try{(c=this.socket)==null||c.send(JSON.stringify(o))}catch(d){this.pending.delete(s),clearTimeout(t),i(d)}})}}const L={GEMINI_KEY:"geminiKey",AUTO_MODE:"autoMode"},D="gemini-2.5-flash",F="ws://127.0.0.1:8080",E=new R,g=new q(F),b=r=>new Promise((e,n)=>{chrome.storage.local.get(r,s=>{var a;const o=(a=chrome.runtime)==null?void 0:a.lastError;if(o){n(new Error(o.message));return}e(s||{})})}),V=r=>new Promise((e,n)=>{chrome.storage.local.set(r,()=>{var o;const s=(o=chrome.runtime)==null?void 0:o.lastError;if(s){n(new Error(s.message));return}e()})}),_=(r,e)=>{chrome.runtime.sendMessage({type:r,payload:e})},x=async()=>{var e;const r=await chrome.tabs.query({active:!0,currentWindow:!0});return(e=r==null?void 0:r[0])==null?void 0:e.id},I=async()=>{const r=await chrome.tabs.query({active:!0,currentWindow:!0}),e=r==null?void 0:r[0];return e?{id:e.id,url:e.url??void 0,title:e.title??void 0}:null},k=async r=>{const e=await chrome.tabs.query({});if(!(e!=null&&e.length))return null;const n=["# list_pages response","## Pages"];return e.forEach((s,o)=>{const a=(s==null?void 0:s.url)??"about:blank",i=s!=null&&s.title?` (${s.title})`:"",t=!!(s!=null&&s.active)||typeof r=="number"&&(s==null?void 0:s.id)===r;n.push(`${o}: ${a}${i}${t?" [selected]":""}`)}),n.join(`
`)},M=r=>{try{const e=new URL(r,r.startsWith("http")?void 0:"https://placeholder.local");e.hash="";const n=e.pathname.endsWith("/")&&e.pathname!=="/"?e.pathname.slice(0,-1):e.pathname;return`${e.protocol}//${e.host}${n}${e.search}`}catch{return r}},N=(r,e)=>!r||!e?!1:M(r)===M(e),W=(r,e,n,s,o)=>{const a=r.map(d=>({role:d.role==="assistant"?"model":"user",parts:[{text:d.content}]}));a.push({role:"user",parts:[{text:e}]});const i=s!=null&&s.url?`Active tab: ${s.title??"Untitled"} (${s.url}). Always begin automation by emitting CALL_TOOL extension_select_page with { "url": "${s.url}" } so the MCP operates on the existing tab.
`:`Always begin automation by selecting the current tab via CALL_TOOL extension_select_page before other actions.
`,t=n==="connected"?`${i}The model is authorized to call any tool exposed by the Chrome DevTools MCP server. Use exact tool identifiers when emitting CALL_TOOL (for example: list_pages, select_page, navigate_page, new_page, extension_click_selector, extension_fill_selector, extension_evaluate_script, etc.). Decide which tools to use based on the user's request and combine them as needed â€” you do not need to ask for permission before calling tools. Prefer operating inside the user's current Chrome window and navigate within the active tab when possible; open new tabs/pages only when necessary. Wait for navigations to complete before interacting and always select a page (select_page or extension_select_page) only after it is actually open. If an action is potentially destructive (closing pages, deleting data), proceed only if the user explicitly requested it.`:"The Chrome DevTools MCP bridge is currently unavailable. Do not emit CALL_TOOL steps.",c=o?`Current open tabs/windows (from list_pages):
${o}
Use these entries to decide whether navigation is required before selecting a page.
`:"";return{contents:a,systemInstruction:{parts:[{text:`You are an automation planner for a Chrome extension. Always respond with JSON matching this schema:
{
  "reply": string,
  "plan": [
    { "type": "NAVIGATE" | "CLICK" | "FILL" | "EVALUATE_SCRIPT" | "TAKE_SCREENSHOT" | "CALL_TOOL", "params": object }
  ]
}
Only include supported action types. Leave "plan" empty if no browser action is required. Prefer short, factual replies. `+t+c}]},generationConfig:{temperature:.3,responseMimeType:"application/json"}}},j=r=>{if(!r)return null;const n=r.trim().replace(/```json|```/g,"").trim();try{return JSON.parse(n)}catch{try{const o=n.indexOf("{"),a=n.lastIndexOf("}");if(o!==-1&&a!==-1&&a>o)return JSON.parse(n.slice(o,a+1))}catch{}}return null},Y=async(r,e)=>{var l,f,y,h,v;const{[L.GEMINI_KEY]:n}=await b([L.GEMINI_KEY]);if(!n)throw new Error("missing-gemini-key");const s=await I(),o=await k(s==null?void 0:s.id),a=W(e,r,g.getStatus(),s,o),i=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${D}:generateContent?key=${encodeURIComponent(n)}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!i.ok){const A=await i.text();throw new Error(`gemini-error:${i.status}:${A||i.statusText}`)}const t=await i.json(),c=((v=(h=(y=(f=(l=t==null?void 0:t.candidates)==null?void 0:l[0])==null?void 0:f.content)==null?void 0:y.parts)==null?void 0:h[0])==null?void 0:v.text)??"",d=j(c);return!d||typeof d.reply!="string"||!Array.isArray(d.plan)?{reply:c||"I was unable to create a plan.",plan:[]}:{reply:d.reply,plan:d.plan.filter(A=>A&&typeof A.type=="string")}},U=async(r,e)=>{var o;const n=[];let s=await I();for(let a=0;a<r.length;a+=1){const i=r[a];_("LLM_PROGRESS",{status:"running",index:a,step:i});try{const t=i!=null&&i.params&&typeof i.params=="object"?i.params:{};let c;if(i.type==="CALL_TOOL"){let d=t.tool||t.toolName||t.tool_name||t.toolCode||t.tool_code||t.name||i.tool||i.toolName||i.tool_name||i.toolCode||i.tool_code,l;if(!d){let u=null,m={};if(t!=null&&t.selector)(t==null?void 0:t.value)!==void 0?(u="extension_fill_selector",m={selector:t.selector,value:t.value}):(u="extension_click_selector",m={selector:t.selector});else if(t!=null&&t.url)u="extension_select_page",m={url:t.url};else if((t==null?void 0:t.pageId)!==void 0||(t==null?void 0:t.page_id)!==void 0){const w=(t==null?void 0:t.pageId)??(t==null?void 0:t.page_id);u=g.isConnected()?"select_page":"extension_select_page",m={pageId:w,page_id:w}}else t!=null&&t.code?(u="extension_evaluate_script",m={code:t.code}):t!=null&&t.text&&typeof t.text=="string"&&(u="extension_fill_selector",m={selector:t.selector??"input",value:t.text});if(u)_("LLM_WARNING",{message:"CALL_TOOL missing tool name â€” inferring tool",inferredTool:u,originalStep:i}),d=u,l=m;else throw new Error("call-tool-missing-name")}const f=i,y=t;l||(l=t.arguments||t.tool_params||t.toolParams||t.args||i.arguments||i.args||i.tool_params||i.toolParams||{}),!l||Object.keys(l).length===0?(f.url&&(l={...l,url:f.url}),y.url&&(l={...l,url:y.url}),f.selector&&(l={...l,selector:f.selector}),f.value&&(l={...l,value:f.value}),f.code&&(l={...l,code:f.code}),f.tool_params&&typeof f.tool_params=="object"&&(l={...l,...f.tool_params}),y.tool_params&&typeof y.tool_params=="object"&&(l={...l,...y.tool_params})):(f.url&&(l.url=f.url),y.url&&(l.url=y.url));try{_("LLM_DEBUG",{message:"Resolved CALL_TOOL",index:a,step:i,toolName:d,toolArgs:l})}catch{}console.debug("[MCP DEBUG] CALL_TOOL resolved",{index:a,toolName:d,toolArgs:l,step:i});const h=String(d||"").toLowerCase(),v=h.startsWith("extension_"),A=h.startsWith("pages_")||h==="new_page"||h==="navigate_page"||h==="list_pages"||h==="select_page",p=u=>l&&l[u]!==void 0?l[u]:i[u]??t[u];if(A)if(h==="new_page"){const u=p("url"),m=!!p("forceNew")||!!p("force_new");if(!u)throw _("LLM_WARNING",{message:"Blocked request to open a new page without URL.",index:a,step:i}),new Error("blocked-new-page-without-url");if(m){if(!g.isConnected())throw _("LLM_WARNING",{message:"Attempted force-new but MCP bridge not connected; blocked.",index:a,step:i}),new Error("blocked-new-page-force-new-bridge-off");c=await g.callTool("new_page",l)}else c=await E.handleAction({type:"NAVIGATE",url:u,tabId:e})}else if(h==="navigate_page"||h==="pages_navigate"||h==="pages_navigate_page"){const u=p("url");if(!u)throw new Error("navigate-missing-url");c=await E.handleAction({type:"NAVIGATE",url:u,tabId:e})}else if(h==="list_pages")c={content:[{type:"text",text:await k(s==null?void 0:s.id)??`# list_pages response
## Pages
0: ${(s==null?void 0:s.url)??"about:blank"} [selected]`}]};else if(h==="select_page"||h==="extension_select_page"){const u=p("url")??p("pageUrl")??p("page"),m=p("page_id")??p("pageId");let w=u;if(!w&&m!==void 0&&!g.isConnected()){const O=Number(m);if(!Number.isNaN(O))try{const C=await chrome.tabs.query({}),S=C==null?void 0:C[O];S!=null&&S.url&&(w=S.url)}catch{}}if(!w)if(m!==void 0)g.isConnected()?c=await g.callTool(d,l):c={success:!0,note:"no-url-select-skip"};else throw new Error("select-page-missing-url");!c&&w&&(N(s==null?void 0:s.url,w)?c={success:!0,note:"already-selected-tab"}:(c=await E.handleAction({type:"NAVIGATE",url:w,tabId:e}),c!=null&&c.success&&(s=await I())))}else{if(!g.isConnected())throw new Error("mcp-bridge-not-connected");c=await g.callTool(d,l)}else if(v)if(h.includes("click")&&p("selector"))c=await E.handleAction({type:"CLICK",selector:p("selector"),tabId:e});else if(h.includes("fill")&&p("selector"))c=await E.handleAction({type:"FILL",selector:p("selector"),value:p("value")??p("text")??p("v"),tabId:e});else if(h.includes("evaluate")&&p("code"))c=await E.handleAction({type:"EVALUATE_SCRIPT",code:p("code"),tabId:e});else if(h.includes("select_page")){const u=p("url")??p("pageUrl")??p("page");if(!u)throw new Error("select-page-missing-url");N(s==null?void 0:s.url,u)?c={success:!0,note:"already-selected-tab"}:(c=await E.handleAction({type:"NAVIGATE",url:u,tabId:e}),c!=null&&c.success&&(s=await I()))}else{if(!g.isConnected())throw new Error("mcp-bridge-not-connected");c=await g.callTool(d,l)}else{if(!g.isConnected())throw new Error("mcp-bridge-not-connected");c=await g.callTool(d,l)}if(c&&(c.isError||c.success===!1)){const m=(Array.isArray(c.content)?(o=c.content.find(w=>w&&typeof w.text=="string"))==null?void 0:o.text:void 0)||c.error||c.message||"CALL_TOOL failed";throw new Error(m)}}else c=await E.handleAction({...t,type:i.type,tabId:e});n.push({success:!0,result:c}),_("LLM_PROGRESS",{status:"completed",index:a,step:i,result:c}),i.type==="NAVIGATE"&&(c!=null&&c.success)&&(s=await I())}catch(t){n.push({success:!1,error:(t==null?void 0:t.message)??String(t)}),_("LLM_PROGRESS",{status:"failed",index:a,step:i,error:(t==null?void 0:t.message)??String(t)});break}}return n},J=async r=>{const{prompt:e,history:n=[],autoMode:s=!1,tabId:o}=r||{};if(!e||typeof e!="string")throw new Error("invalid-prompt");const a=typeof o=="number"?o:await x(),i=await Y(e,n);_("LLM_PLAN",{plan:i.plan,reply:i.reply});let t;return s&&i.plan.length>0&&(t=await U(i.plan,a)),{success:!0,reply:i.reply,plan:i.plan,execution:t}},B=async r=>{const{plan:e=[],tabId:n}=r||{};if(!Array.isArray(e)||e.length===0)throw new Error("empty-plan");const s=typeof n=="number"?n:await x();return{success:!0,execution:await U(e,s)}},H=async r=>{const e={};return typeof(r==null?void 0:r.geminiKey)=="string"&&(e[L.GEMINI_KEY]=r.geminiKey.trim()),typeof(r==null?void 0:r.autoMode)=="boolean"&&(e[L.AUTO_MODE]=r.autoMode),Object.keys(e).length?(await V(e),{success:!0}):{success:!0}},z=async()=>{const r=await b([L.GEMINI_KEY,L.AUTO_MODE]);return{success:!0,geminiKey:(r==null?void 0:r[L.GEMINI_KEY])??null,autoMode:(r==null?void 0:r[L.AUTO_MODE])??!1,mcpStatus:g.getStatus()}},Q=async r=>{const{tool:e,toolName:n,name:s,arguments:o,params:a}=r||{},i=e||n||s||(a==null?void 0:a.tool),t=o??(a==null?void 0:a.arguments)??(r==null?void 0:r.args)??{};if(!i)throw new Error("tool-required");return{success:!0,result:await g.callTool(i,t)}};chrome.runtime.onMessage.addListener((r,e,n)=>{const{type:s,payload:o}=r||{};if(!s)return;const a=i=>{i.then(t=>n(t)).catch(t=>n({success:!1,error:(t==null?void 0:t.message)??String(t)}))};switch(s){case"MCP_ACTION":return a(E.handleAction(o)),!0;case"LLM_REQUEST":return a(J(o)),!0;case"EXECUTE_PLAN":return a(B(o)),!0;case"SAVE_SETTINGS":return a(H(o)),!0;case"GET_SETTINGS":return a(z()),!0;case"MCP_CALL_TOOL":return a(Q(o)),!0;default:n({success:!1,error:`unknown-message:${s}`});return}});g.onStatusChange(r=>{_("MCP_STATUS",{status:r})});g.onNotification(r=>{_("MCP_NOTIFICATION",r)});
